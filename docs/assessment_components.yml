version: "1.0.0"
components:
  - name: open_text_question
    measures:
      - rubric: communication
        weight: 0.35
      - rubric: critical_thinking
        weight: 0.35
      - rubric: content_mastery
        weight: 0.30
    description: >-
      The open text question is a type of interactive question where users can write down a text answer. The component consists in a markdown code block with the language set to `question` and has a metadata property eval in the metadata section of the code block with instructions on how to evaluate the answer. Inside the code block, you must write down 3-5 example answers with CORRECT: or INCORRECT: prefix. The actual question must be written before the code block so the user can see it.
    goodFor:
      - explanation
      - recall
      - understanding
    avoid:
      - multiple choice
      - true/false
      - fill in the blank
      - this component is intended only for free form answers
      - never use for visual questions
      - only for textual easy to evaluate questions
    props:
      - eval: string (required)
    example: |
      ### What is console.log in your own words?

      ```question eval="The user needs to write using its own words what is console.log"
      CORRECT: The console.log is a function that logs a message to the console.
      INCORRECT: It is used to solve logarithms problems.
      CORRECT: It prints things to the console.  
      ```
    rules:
      - MUST only require a textual answer that can be evaluated without images.
      - MUST NOT ask the learner to draw, sketch, diagram, circle, shade, underline, point, annotate, mark on paper, or `visualize and show`
      - MUST NOT include phrases such as `draw…`, `sketch…`, `diagram…`, `divide the shape and show…`, `mark the figure…`.
      - If the task is visual, convert to an explanatory `image` component or a numeric/text question (`fill_in_the_blank`, `multiple_choice_question`) instead.

  - name: multiple_choice_question
    intendedUse:
      - evaluation
      - knowledge assessment
    measures:
      - rubric: content_mastery
        weight: 0.55
      - rubric: critical_thinking
        weight: 0.25
      - rubric: application_problem_solving
        weight: 0.20
    description: >-
      Quizzes or multiple choice questions are a great way to test the knowledge of the user. They are a great way to make the user think and to make the lesson more interactive. In LearnPack, the quizzes are rendered from task list syntax.

      ### Rules

      1. Each group of options should have a question that is a list item, numbered or not, separated by an empty line from the options.
      2. Each group of options must have an unique correct answer marked with [x]
      3. Each option should be a checkbox (task list item) indented by 3 to 6 spaces, this is important for the parsing from markdown to HTML.
      4. It must be an empty line between the question title and the options. This is important for the parsing from markdown to HTML.
      5. Ignoring any rule from the above list will break the parsing from markdown to HTML and the quiz will not be rendered correctly.

    goodFor:
      - reflection
      - explanation
      - recall
      - knowledge assessment
    avoid:
      - open text question
      - this component is intended only for multiple choice answers with an unique correct answer per group of options
    example: |

      ### Put your knowledge to the test!
      Select the correct answer for each question.


      1. Question number 1 (This is the title for the group of questions) -> this is the question title (can be numbered or not)
        <!-- Each group of options should have an empty line between the question title and the options -->
        - [ ] Incorrect option -> this is the incorrect option (can be marked with [ ])
        - [ ] Incorrect option -> Each task list item has between 3 and 6 spaces of indentation
        - [x] Correct option (This is the correct answer) -> this is the correct answer (is the only one that can be marked with [x])

      2. Question number 2
        <!-- Each group of options should have an empty line between the question title and the options -->
        - [ ] Incorrect option
        - [x] Correct option
        - [ ] Incorrect option


      --- Second Example ---

      - Question number 1

        - [x] Correct option
        - [ ] Incorrect option
        - [ ] Incorrect option

      - Question number 2

        - [ ] Incorrect option
        - [x] Correct option
        - [ ] Incorrect option

  - name: fill_in_the_blank
    intendedUse:
      - reflection
      - explanation
      - recall
      - knowledge assessment
    measures:
      - rubric: content_mastery
        weight: 0.70
      - rubric: communication
        weight: 0.15
      - rubric: application_problem_solving
        weight: 0.15
    description: >-
      A fill in the blank is a component that allows the user to fill in the blank with the correct answer. It consists in a markdown code block with the language set to `fill_in_the_blank`. Inside the code block, you must write the question with the blank (or blanks) to be filled. Each blank consist in _1_, _2_, _3_, etc. In the metadata section, you must include the valid answers for each blank. The blanks are numbered starting from 1. Case insensitive answers are allowed. If multiple answer are allowed for a blank, you must include them separated by a comma in the proper metadata property. You can also use fill in the blank for numerical questions.
    avoid:
      - open text question
      - this component is intended only for fill in the blank answers
      - never use for visual questions
      - only for textual easy to evaluate questions
    example: |
      ### Let's recall!

      ```fill_in_the_blank 1="Paris" 2="Berlin"
      The capital of France is _1_, the capital of Germany is _2_.
      ```
      --- Second Example ---

      ### Are you really learning? Let's check it!

      Complete the sentence with number of hours of sleep per day that are recommended based on the lesson.

      ```fill_in_the_blank 1="7,8,9,10" 
      I need to sleep at least _1_ hours a day to be healthy.
      ```

      --- Third Example ---

      ### Let's check your math skills!

      ```fill_in_the_blank 1="12" 2="5" 3="4"
      Calculate the result of 2 * 6 = _1_
      If we divide 20 by 4, the result is _2_
      The square root of 16 is _3_
      ```

  - name: code_challenge_proposal
    intendedUse:
      - hands-on learning
      - code experimentation
      - immediate feedback on code execution
      - this will render an acceptable component for the teacher, so the teacher can generate a coding challenge for the student
      - The student will see all the files from the lessons
      - So you need to suggest as many files as needed for the exercise
    description: >-
      A code file proposal is a component the teacher will use to generate some coding files used to solve an exercise in the instructions, it consists in a markdown code block with the language set to `code_challenge_proposal`. Inside the code block, you must explain what the student needs to do in the exercise in at most 20 sentences. You need to explain the files that will be generated and the instructions for the student to complete the exercise.
    rules:
      - The main file must be always be named app.extension, where extension is the extension of the file, for example, app.js, app.html, app.css, etc.
      - Keep challenges simple and easy to understand for the student, it must be related to the lesson content and the exercise instructions.
    avoid:
      - complex code that might not be inferred correctly by an AI model
    example: |
      ```code_challenge_proposal 
      In this exercise, the student needs to complete a function "multiply" that multiplies two numbers and print the result to the console. This exercise required an app.js where the student will write the code to complete the function. The app.js will contain a skeleton of the function to be completed.
      ```

      ```code_challenge_proposal
      In this exercise, the student needs to create a simple index.html page with a title and a paragraph. This page is linked to the app.css file with basic styling. The HTML files contains a heading but is missing the paragraph. The styles contain the rules for two id: #title and #paragraph, but the student needs to add the ids to the correct elements in the HTML file.
      ```
