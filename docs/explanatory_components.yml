version: "1.0.0"
components:
  - name: mermaid-diagram
    intentedUse: explanation, complementary to the main content
    description: >-
      Mermaid diagrams allow you to create various types of diagrams including flowcharts, sequence diagrams, class diagrams, and more. The component renders Mermaid syntax into interactive diagrams.
    goodFor: visualization, process explanation, system architecture, data flow.
    whenToUse: Use it only when the diagram
    avoid: complex diagrams that might not render well, use for simple to medium complexity diagrams
    rules: 
      - NEVER under ANY circumstances use write parentheses inside [] because it will break the mermaid syntax and won't render properly
    example: |
      ```mermaid
      graph TD
          A[Start] --> B{Is it working?}
          B -->|Yes| C[Great!]
          B -->|No| D[Debug]
          D --> B
      ```

  - name: ask-rigo-button
    intentedUse: explanation, complementary to the main content
    description: >-
      The Ask Rigo button provides AI-powered assistance for quizzes and tests. It allows users to get hints and help from the Rigo AI assistant based on the current context. It consist in a link that starts with https://4geeks.com/ask?query= and the query is the current question to make to the Rigo AI assistant.
    goodFor: providing hints, AI assistance, learning support
    avoid: overuse, should be used sparingly to encourage independent thinking
    usage: Automatically appears in quiz and test components, no manual configuration needed
    example: |
      [Ask Rigo about HTML](https://4geeks.com/ask?query=What is the purpose of HTML?)

  - name: runnable-code
    intentedUse: code experimentation, immediate feedback, understand code.
    description: >-
      Code blocks with the runnable metadata that can be executed directly in the browser. Users can run the code and see the output, making it interactive for learning programming concepts.
    goodFor: code experimentation, immediate feedback, understand code.
    avoid: complex code that might not run in the browser environment easily, this is intended only for demostrative purposes.
    example: |
      ```javascript runnable="true"
      console.log("Hello, World!");
      let x = 5;
      let y = 10;
      console.log(x + y);
      ```

  - name: code-file-proposal
    intentedUse: hands-on learning, code experimentation, immediate feedback on code execution, this renders in a separate tab where the student can edit the code file. The student will see all the files from the lessons. So you need to suggest as many files as needed for the exercise.
    description: >-
      A code file proposal is a component the teacher will use to generate a coding files used to solve an exercise in the instructions, it consists in a markdown code block with the language set to `code-file-proposal`. Inside the code block, you must write a 5 to 10 sentences description of the exercise. It has a metadata property file_name in the metadata section of the code block with the name of the file to be generated, including  the extension. Keep in mind that for HTML, CSS and Javascript files, the code is executed directly in the browser, for other programming languages, the code executing will be inferred by an AI model. Prefer a single file instead of multiple ones per lesson. But if multiple files are needed, suggest them all.
    goodFor: hands-on learning, code experimentation, immediate feedback on code execution, this renders in a separate tab where the student can edit the code file. The student will see all the files from the lessons. So you need to suggest as many files as needed for the exercise.
    avoid: complex code that might not be inferred correctly by an AI model. 
    example: |
      ```code-file-proposal file_name="app.js"
      In this file, the student needs to complete a function "multiply" that multiplies two numbers and print the result to the console.
      ```

      ```code-file-proposal file_name="app.css"
      In this file, the student needs to style the HTML page with CSS.
      ```

      ```code-file-proposal file_name="app.html"
      In this file, the student needs to create a simple HTML page with a title and a paragraph. This page is linked to the app.css file and the app.js files.
      ```

  - name: image
    intendedUse: explanation, visualization, complementary to the main content
    description: >-
      Images are used to support learning through clear and meaningful visual content.
      They should illustrate concepts, examples, or processes that help the student 
      understand the main content better. Each image is generated from a descriptive 
      alt text that acts as a detailed prompt for AI.
    goodFor: visual learning, illustrating concepts, step-by-step guides, data visualization
    whenToUse: when a concept is abstract, complex, or easier to understand with a visual aid
    avoid: decorative images without educational value, overly abstract prompts, 
           using images where text or code is clearer
    rules: 
      - Use standard markdown image syntax: "![alt text](image-url)"
      - The alt text must contain a detailed prompt with at least 20 words
      - The alt text should describe the educational purpose of the image, not only its appearance
      - The image URL must always start with "./.learn/assets/" and contain a meaningful filename
      - Images should be directly relevant to the learning objective of the lesson
      - Prefer clarity and simplicity over unnecessary visual complexity
      - Ensure consistency with other media (diagrams, code, etc.)
    example: |
      ![An educational illustration showing the process of how a web browser requests a web page from a server, 
      including the client, DNS lookup, server response, and HTML rendering, step by step with arrows and labels](./.learn/assets/browser-request-flow.png)

